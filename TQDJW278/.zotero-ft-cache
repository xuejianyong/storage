Understanding and Using Context
Anind K. Dey
College of Computing & GVU Center, Georgia Institute of Technology, Atlanta, GA, USA
Abstract: Context is a poorly used source of information in our computing environments. As a result, we have an impoverished understanding of what context is and how it can be used. In this paper, we provide an operational deﬁnition of context and discuss the different ways in which context can be used by context-aware applications. We also present the Context Toolkit, an architecture that supports the building of these context-aware applications. We discuss the features and abstractions in the toolkit that make the task of building applications easier. Finally, we introduce a new abstraction, a situation which we believe will provide additional support to application designers.
Keywords: Application support; Context; Context-awareness; Situation-awareness

1. Introduction

tectural support has two parts: services and

abstractions.

Humans are quite successful at conveying ideas

In this paper, we will review previous

to each other and reacting appropriately. This is

attempts to deﬁne and provide a characterisation

due to many factors: the richness of the language

of context and context-aware computing, and

they share, the common understanding of how

then present our own deﬁnition and character-

the world works, and an implicit understanding

isation. We then discuss how this increased

4

of everyday situations. When humans talk with humans, they are able to use implicit situational information, or context, to increase the conversational bandwidth. Unfortunately, this ability to convey ideas does not transfer well to humans

understanding informs the development of a shared infrastructure, the Context Toolkit1, for context-sensing and context-aware application development. We discuss both the services offered by the toolkit and the programming abstractions it provides to designers.

interacting with computers. In traditional inter-

active computing, users have an impoverished

mechanism for providing input to computers. Consequently, computers are not currently

2. What is Context?

enabled to take full advantage of the context

To develop a speciﬁc deﬁnition that can be used

of the human-computer dialogue. By improving

prescriptively in the context-aware computing

the computer’s access to context, we increase the

ﬁeld, we will look at how researchers have

richness of communication in human-computer

attempted to deﬁne context in their own work.

interaction and make it possible to produce more

While most people tacitly understand what

useful computational services.

context is, they ﬁnd it hard to elucidate. Previous

In order to use context effectively, we must

deﬁnitions of context are done by enumeration

understand what context is and how it can be

of examples or by choosing synonyms for

used, and we must have architectural support.

context.

An understanding of context will enable application designers to choose what context to use in

2.1. Previous deﬁnitions of context

their applications. An understanding of how context can be used will help application designers determine what context-aware behaviours to support in their applications. Finally,

In the work that ﬁrst introduces the term ‘‘context-aware’’, Schilit and Theimer [1] refer to context as location, identities of nearby

architectural support will enable designers to build their applications more easily. This archi-

1The Context Toolkit can be downloaded from http:// www.cc.gatech.edu/fce/contexttoolkit

# Springer-Verlag London Ltd Personal and Ubiquitous Computing (2001) 5:4–7

people and objects, and changes to those objects. These types of deﬁnitions that deﬁne context by example are difﬁcult to apply. When we want to determine whether a type of information not listed in the deﬁnition is context or not, it is not clear how we can use the deﬁnition to solve the dilemma.
Other deﬁnitions have simply provided synonyms for context; for example, referring to context as the environment or situation [2–4]. As with the deﬁnitions by example, deﬁnitions that simply use synonyms for context are extremely difﬁcult to apply in practice. The deﬁnitions by Schilit et al. [5] and Pascoe [6] are closest in spirit to the operational deﬁnition we desire. Schilit et al. claim that the important aspects of context are: where you are, who you are with, and what resources are nearby. Pascoe deﬁnes context to be the subset of physical and conceptual states of interest to a particular entity. These deﬁnitions are too speciﬁc. Context is all about the whole situation relevant to an application and its set of users. We cannot enumerate which aspects of all situations are important, as these will change from situation to situation. For this reason, we could not use these deﬁnitions provided.

context because it can be used to characterise the user’s situation.
3. Deﬁning Context-Aware Computing
Context-aware computing was ﬁrst discussed by Schilit and Theimer [1] in 1994 as software that ‘‘adapts according to its location of use, the collection of nearby people and objects, as well as changes to those objects over time’’. Since then, there have been numerous attempts to deﬁne context-aware computing, most of which have been too speciﬁc [7].
3.1. Our deﬁnition of context-aware
A system is context-aware if it uses context to provide relevant information and/or services to the user, where relevancy depends on the user’s task.
We have chosen a general deﬁnition of contextaware computing. When we try to apply previous deﬁnitions to established context-aware applications, we ﬁnd that they do not ﬁt.
3.2. Features for context-aware applications

2.2. Our deﬁnition of context

Similar to the problem of deﬁning context-

Context is any information that can be used to characterise the

aware, researchers have also tried to specify the

5

situation of an entity. An entity is a person, place, or object that is

important features of a context-aware applica-

considered relevant to the interaction between a user and an application, including the user and applications themselves.

tion [5,6]. Again, these features have tended to be too speciﬁc to particular applications.

This deﬁnition makes it easier for an application developer to enumerate the context for a given application scenario. If a piece of information can be used to characterise the situation of a participant in an interaction, then that information is context. Take the canonical context-

Our proposed categorisation combines the ideas from previous taxonomies and attempts to generalise them to satisfy all existing contextaware applications. There are three categories of features that a context-aware application can support:

aware application, an indoor mobile tour guide,

. presentation of information and services to a

as an example. The obvious entities in this

user

example are the user, the application and the tour sites. We will look at two pieces of information – weather and the presence of other people – and use the deﬁnition to

. automatic execution of a service for a user
. tagging of context to information to support later retrieval.

determine whether either one is context. The

weather does not affect the application because

4. Support for Building

it is being used indoors. Therefore, it is not

Applications

context. The presence of other people, however,

can be used to characterise the user’s situation. If

With an understanding of what context is and

a user is travelling with other people, then the

the different ways in which it can be used,

sites they visit may be of particular interest to

application builders can more easily determine

them. Therefore, the presence of other people is

what behaviours or features they want their

Understanding and Using Context

applications to support and what context is

pendently of applications, there is a need for

required to achieve these behaviours. However,

them to be persistent, available all the time.

something is still missing. Application builders

Because an important part of context is

may need help moving from the design to an

historical information, the Context Toolkit

actual implementation. This help can come in

provides support for the storage of context.

two forms. The ﬁrst is a combination of

Context widgets automatically store all of the

architectural services or features that designers

context they sense and make this history

can use to build their applications from. The

available to any interested applications. Appli-

second form is abstractions that allow designers

cations can use historical information to predict

to think about their applications from a higher

the future actions or intentions of users. This

level. We have built an architecture, the Context Toolkit, that contains a combination of features and abstractions to support contextaware application builders. In this section, we will discuss the features and abstractions in the Context Toolkit, and propose a new abstraction.

prediction or interpretations functionality is encapsulated in the context interpreter abstraction. Interpreters accept one or more types of context and produce a single piece of context. An example is converting from a name to an email address. A more complicated example is

4.1. Features for context-aware applications

interpreting context from all the widgets in a conference room to determine that a meeting is occurring.

The Context Toolkit makes it easy to add the use of context to existing non-context-aware applications and to evolve existing contextaware applications. In addition, the architecture makes context-aware applications resistant to changes in the context-sensing layer. It encap-

Traditional user input comes from the keyboard and mouse. These devices are connected directly to the computer they are being used with. When dealing with context, the devices used to sense context most probably are not attached to the same computer running the

sulates changes and the impact of changes, so

application. For example, an indoor infrared

applications do not need to be modiﬁed.

positioning system may consist of many infrared

Our architecture is built on the concept of

emitters and detectors in a building. The sensors

6

enabling applications to obtain the context they require without them having to worry about how

must be physically distributed and cannot all be directly connected to a single machine. The

the context was sensed. In a previous work, we

Context Toolkit makes the distribution of the

presented the context widget [8], an abstraction

context architecture transparent to context-

that implements this concept. A context widget

aware applications, mediating all communica-

is responsible for acquiring a certain type of

tions between applications and components.

context information and it makes that informa-

The ﬁnal abstraction supported by our archi-

tion available to applications in a generic

tecture is aggregation. Context aggregators aggre-

manner, regardless of how it is actually sensed.

gate or collect context. The notion of an

Applications can access context from widgets

aggregator comes directly from our deﬁnition of

using traditional poll and subscribe methods,

context. We deﬁned context as information used

commonly available with graphical user interface

to characterise the situation of an entity. If we

(GUI) widgets.

think of a context widget as being responsible for

With most GUI applications, widgets are

a single piece of information, we need an

instantiated, controlled and used by only a single

abstraction to represent an entity. This abstrac-

application. In contrast, our context-aware

tion, a context aggregator, is responsible for all

applications do not instantiate individual con-

the context for a single entity. When designers

text widgets, but must be able to access existing

think about context and interactions, it is

ones, when they require. To meet this require-

natural for them to think in terms of entities,

ment, context widgets operate independently from

and that makes an aggregator the correct

the applications that use them. This eases the

abstraction to use for building applications.

programming burden on the application designer

Aggregators gather the context about an entity

by not requiring them to maintain the context

(e.g. a person) from the available context

widgets, while allowing easy communication

widgets, behaving as a proxy to context for

with them. Because context widgets run inde-

applications.

A. K. Dey

To summarise, the Context Toolkit supports

process for determining when interesting events

common features required by context-aware

occur, the situation abstraction may prove to be

applications: capture and access of context,

useful for end users. One of the holy grails of

storage, distribution, and independent execution

context-aware computing is to have applications

from applications. The toolkit provides three

that do the right thing at the right time for users.

abstractions: widgets, interpreters and aggrega-

While designers who have domain-speciﬁc

tors.

expertise can determine part of the solution,

4.2. The situation abstraction

they will obviously not think of everything that is needed to support individual users. It is the end

The support provided by the Context Toolkit has enabled us to build a number of applications that would otherwise have been difﬁcult to build. However, we have recently been experimenting with a new type of abstraction for supporting application builders. This new abstraction, a situation, is at a level above widgets, interpreters and aggregators.
The idea of the situation abstraction was also derived from our deﬁnition of context. Cur-

user who is in the best position to further specialise context-aware applications to meet their individual needs. The situation abstraction may allow users to perform this specialisation.
We would like to carry out user studies to investigate whether the situation abstraction is appropriate for both application designers and end-users and how it compares to the original abstractions of widgets, aggregators and interpreters.

rently, application designers need to explicitly poll and subscribe to widgets and aggregators for

References

context information and call on interpreters to determine when relevant entities are in a

1. Schilit B, Theimer M. Disseminating active map information to mobile hosts. IEEE Network 1994; 8: 22–32

particular state so they can take action. This

2. Brown PJ. The Stick-e document: a framework for creating

collection of states can be described as a

context-aware applications. In: Proceedings of Electronic

situation.

Publishing ’96; 259–272

The situation abstraction is exactly that: a description of the states of relevant entities. We

3. Rodden T, Cheverst K, Davies K, Dix A. Exploiting context in HCI design for mobile systems. Workshop on Human Computer Interaction with Mobile Devices,

believe that providing this description requires less effort than determining which individual

1998, http://www.dcs.gla.ac.uk/njohnson/papers/mobile/ HCIMD1.html

7

context components need to be contacted and determining when the collective situation has

4. Ward A, Jones A, Hopper A. A new location technique for the active ofﬁce. IEEE Personal Communications 1997; 4: 42–47

been realised or satisﬁed. Instead, the Context

5. Schilit B, Adams N, Want R. Context-aware computing

Toolkit is responsible for the translation of the description to the ‘‘wiring’’ of the context components and for determining when the

applications. In: First International Workshop on Mobile Computing Systems and Applications, 1994; 85–90
6. Pascoe J. Adding generic contextual capabilities to wearable computers. In: Proceedings of 2nd International

individual elements of the situation have been

Symposium on Wearable Computers, 1998; 92–99

collectively satisﬁed. Now context-aware application designers can concentrate on the heart of the design process: determining what contextaware features their application should support

7. Dey AK, Abowd GD. Towards a better understanding of context and context-awareness. CHI’2000 Workshop on the What, Who, Where, When, and How of ContextAwareness, 2000, ftp://ftp.cc.gatech.edu/pub/gvu/tr/1999/ 99-22.pdf

and when should they be enacted. We currently have limited support for the
situation abstraction. We are struggling with the

8. Salber D, Dey AK, Abowd GD. The Context Toolkit: aiding the development of context-enabled applications. In: Proceedings of CHI’99; 434–441

tradeoff between supporting extremely complex

situations and providing a simple method for describing situations. Ideally, we would like to support both simultaneously. By simplifying the

Correspondence to: A. K. Dey, Future Computing Environments Group, College of Computing & GVU Center, Georgia Institute of Technology, Atlanta, GA, 30332-0280, USA. Email: anind@cc.gatech.edu

Understanding and Using Context

